{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/pretty-print-json-in-vim","webpackCompilationHash":"e6ea3bbe3ddca9ef95da","result":{"data":{"markdownRemark":{"id":"026690b5-51de-5b4f-89a2-8cd145563194","html":"<p>This post is rather a quick tip than a real article. I think I don’t have to give a specific context here, since the use case is clear: You’ve got some JSON from any resource and you want to inspect it for any reason. And since you’re a Vim user, of course you want to do that inside your Vim.</p>\n<p>Great. So now we have some JSON and we paste it into our Vim and because our mentioned resource doesn’t return pretty printed JSON, all we see is a big unreadable junk of JSON data in our buffer. How do we get this pretty printed? It’s as simple as running this command within Vim:</p>\n<div class=\"gatsby-highlight\" data-language=\"vim\"><pre class=\"language-vim\"><code class=\"language-vim\"><span class=\"token punctuation\">:</span><span class=\"token operator\">%</span><span class=\"token operator\">!</span><span class=\"token keyword\">python</span> <span class=\"token operator\">-</span><span class=\"token keyword\">m</span> json<span class=\"token operator\">.</span>tool</code></pre></div>\n<p>That’s it, try it.</p>\n<p>Let’s take a look at what’s happening here. We can actually split the command above into the following parts:</p>\n<ul>\n<li><code class=\"language-text\">:</code> - Brings you from Normal Mode into Command-Line Mode. Vim now waits for you to enter a command.</li>\n<li><code class=\"language-text\">%</code> - A symbolic identifier to specify a range. <code class=\"language-text\">%</code> defines a range from the first to the last line of the current buffer. You could also specify line numbers like <code class=\"language-text\">2,5</code> which defines the range from line 2 to line 5. Another possible way to define a range is to use Visual Mode. Simply select your target lines and type <code class=\"language-text\">:</code>. This prepares the command line with <code class=\"language-text\">&#39;&lt;,&#39;&gt;</code>, which is the range definition for “Everything that has been visually selected”.</li>\n<li><code class=\"language-text\">!</code> - Starting your command with <code class=\"language-text\">!</code> lets you run any shell command from within Vim. Having a range selected before makes the shell using that as standard input stream.</li>\n<li><code class=\"language-text\">python -m json.tool</code> - The actual shell command. Here we run a Python library module <code class=\"language-text\">json.tool</code> that does the actual work for us. The output of this command is sent back to your Vim buffer once executed.</li>\n</ul>\n<p>Of course, this command only works if you have Python installed on your local machine. Unix machines usually come with a default Python installation.</p>\n<p>Hope this helps!</p>","fields":{"slug":"/posts/pretty-print-json-in-vim","tagSlugs":["/tag/vim/","/tag/productivity/","/tag/tools/"]},"frontmatter":{"date":"2014-07-10T11:09:47.000Z","description":"Quick tip! Format JSON within Vim with a single command.","tags":["Vim","Productivity","Tools"],"title":"Pretty print JSON in Vim"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/pretty-print-json-in-vim"}}}